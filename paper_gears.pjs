/******************************************************************************* 
 * 
 * Copyright 2011 Zack Grossbart 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

var width = 800;
var height = 900;
var started = false;

var gears = [];

function Gear() {
    this.angle = 0.0;
    
    this.create = function(/*int*/ x, /*int*/ y, /*int*/ d, /*color*/ c, /*int*/ speed, /*boolean*/ clockwise) {
        this.group = new Group();
        this.speed = speed;
        this.clockwise = clockwise;
        
        var p = new Point(x, y);
        var outerCircle = new Path.Circle(p, d / 2);
        outerCircle.fillColor = c;
        
        var innerCircle = new Path.Circle(p, d / 8);
        innerCircle.fillColor = 'white';
        
        this.group.addChild(this.drawTeeth((d / 2) - 5, d / 15, c, p));
    }
    
    this.drawTeeth = function(/*int*/ d, /*int*/ plots, /*color*/ c, /*Point*/ p) {
        var increase = Math.PI * 2 / plots;
        var angle = 0;
        var w = 35;
        var h = 35;
        
        var teeth = new Group();
        
        var path = new Path();
        path.add(new Point(-(w / 4), -(h / 2)));  // upper left
        path.add(new Point((w / 4), -(h / 2)));   // upper right
        path.add(new Point((w / 2), (h / 2)));    // bottom right
        path.add(new Point(-(w / 2), (h / 2)));   // bottom left
        path.closePath();
        path.fillColor = c;
        
        var symbol = new Symbol(path);
        
        for (var i = 0; i < plots; i++) {
            var t = 2 * Math.PI * i / plots;
            var x = Math.round((d + (w / 2)) * Math.cos(t));
            var y = Math.round((d + (h / 2)) * Math.sin(t));
            
            var placed = symbol.place(new Point(p.x + x, p.y + y));
            //path.translate(p);
            
            // 1 radian = 57.2957795 degrees
            placed.rotate((57.2957795 * angle) + 90);
            
            teeth.addChild(placed);
            
            
            angle += increase;
        }
        
        return teeth;
    }
    
    this.rotate = function() {
        if (this.clockwise) {
            this.group.rotate(this.speed);
        } else {
            this.group.rotate(-this.speed);
        }
    }
}

/**
 * This function helps us with debugging.  We can stop and start
 * the animation whenever the user clicks the mouse.
 */
function onMouseUp(event) {
    started = !started;
}

/**
 * This function initializes our script.
 */
function init() {
    
    var speed = 0.75;
    
    var redGear = new Gear();
    redGear.create(width/3, height/4, 315, '#FF0000', speed, true);
    gears.push(redGear);
    
    var blueGear = new Gear();
    blueGear.create((width / 3) + (315 / 1.48), (height / 4) + (315 / 1.62), 195,
                     '#0000FF', speed * 1.62, false);
    gears.push(blueGear);
    
    var greenGear = new Gear();
    greenGear.create((width/3) + 39, (height / 4) + (315 / 1.53) + 219, 315, '#00FF00', speed, true);
    gears.push(greenGear);
}


/**
 * This function is called with each frame of the animation.
 */
function onFrame(event) {
    if (started) {
        for (var i = 0; i < gears.length; i++) {
            gears[i].rotate();
        }
    } 
}

init();
