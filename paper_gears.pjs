/******************************************************************************* 
 * 
 * Copyright 2011 Zack Grossbart 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

var width = 850;
var height = 850;
var started = true;

var gears = [];
var clockwise = false;
var toothSize = 28;

function Gear() {
    this.angle = 0.0;
    
    this.create = function(/*int*/ x, /*int*/ y, /*int*/ teeth, /*color*/ c, /*int*/ speed, /*boolean*/ clockwise) {
        this.group = new Group();
        this.speed = speed;
        this.clockwise = clockwise;
        
        var d = teeth * 15;
        
        var p = new Point(x, y);
        var outerCircle = new Path.Circle(p, d / 2);
        outerCircle.fillColor = c;
        
        var innerCircle = new Path.Circle(p, d / 8);
        innerCircle.fillColor = 'white';
        
        this.group.addChild(this.drawTeeth((d / 2) - 5, d / 15, c, p));
    }
    
    this.drawTeeth = function(/*int*/ d, /*int*/ plots, /*color*/ c, /*Point*/ p) {
        var increase = Math.PI * 2 / plots;
        var angle = 0;
        
        var teeth = new Group();
        
        var path = new Path();
        path.add(new Point(-(toothSize / 4) + 2, -(toothSize / 2)));  // upper left
        path.add(new Point((toothSize / 4) - 2, -(toothSize / 2)));   // upper right
        
        // Curve down to the bottom right point
        var throughPoint = new Point(new Point((toothSize / 4), -(toothSize / 2) + 4));
        var toPoint = new Point((toothSize / 2), (toothSize / 2));
        path.arcTo(throughPoint, toPoint);
        
        path.add(new Point(-(toothSize / 2), (toothSize / 2)));   // bottom left
        
        // Curve up to the top left point
        throughPoint = new Point(new Point(new Point(-(toothSize / 4) , -(toothSize / 2) + 4)));
        toPoint = new Point(-(toothSize / 4) + 2, -(toothSize / 2));
        path.arcTo(throughPoint, toPoint);
        path.closePath();
        path.fillColor = c;
        
        var symbol = new Symbol(path);
        
        for (var i = 0; i < plots; i++) {
            var t = 2 * Math.PI * i / plots;
            var x = Math.round((d + (toothSize / 2)) * Math.cos(t));
            var y = Math.round((d + (toothSize / 2)) * Math.sin(t));
            
            var placed = symbol.place(new Point(p.x + x, p.y + y));

            // 1 radian = 57.2957795 degrees
            placed.rotate((57.2957795 * angle) + 90);
            teeth.addChild(placed);
            angle += increase;
        }
        
        return teeth;
    }
    
    this.rot = function(/*int*/ rotations) {
        for (var i = 0; i < rotations; i++) {
            this.rotate();
        }
    }
    
    this.rotate = function() {
        if (this.clockwise) {
            this.group.rotate(this.speed);
        } else {
            this.group.rotate(-this.speed);
        }
    }
}

/**
 * This function helps us with debugging.  We can stop and start
 * the animation whenever the user clicks the mouse.
 */
function onMouseUp(event) {
    started = !started;
}

function addGear(/*Point*/ p, /*int*/ g1, /*int*/ g2, /*color*/ color, /*int*/ speed, /*int*/ angle) {
    var d1 = (g1 * 15) / 2;
    var d2 = (g2 * 15) / 2;
    
    var t = 2 * Math.PI * angle / 360;
    var x = Math.round(d1 * Math.cos(t));
    var y = Math.round(d1 * Math.sin(t));
    var p2 = new Point(p.x + x, p.y + y);
    
    x = Math.round(d2 * Math.cos(t));
    y = Math.round(d2 * Math.sin(t));
    var p3 = new Point(p2.x + x + ((toothSize + 12) / 2), p2.y + y + ((toothSize + 12) / 2));
    
    if (clockwise) {
        p3 = new Point(p2.x + x - ((toothSize + 12) / 2), p2.y + y + ((toothSize + 12) / 2));
    }
    
    var gear = new Gear();
    gear.create(p3.x, p3.y, g2, color, speed * (g1 / g2), clockwise);
    gears.push(gear);
    
    clockwise = !clockwise;
    return {
        'point': p3,
        'speed': speed * (g1 / g2),
        'gear': gear
    };
}

/**
 * This function initializes our script.
 */
function init() {
    
    var speed = 0.75;
    
    var p = new Point(width / 3.5, height / 5);
    var redGear = new Gear();
    redGear.create(p.x, p.y, 15, '#FF0000', speed, true);
    gears.push(redGear);
    
    g = addGear(p, 15, 9, '#0000FF', speed, 25);
    g.gear.rot(4);
    
    g = addGear(g.point, 9, 11, '#00FF00', g.speed, 120);
    g.gear.rot(30);
    
    g = addGear(g.point, 11, 21, '#F00FF0', g.speed, 45);
    g.gear.rot(28);
                                  
    g = addGear(g.point, 21, 9, 'orange', g.speed, 150);
    g.gear.rot(7);
}

/**
 * This function is called with each frame of the animation.
 */
function onFrame(event) {
    if (started) {
        for (var i = 0; i < gears.length; i++) {
            gears[i].rotate();
        }
    } 
}

init();
