/******************************************************************************* 
 * 
 * Copyright 2011 Zack Grossbart 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/
 
var speed = 0.75;

var width = 960;
var height = 650;
var started = false;

var gears = [];
var clockwise = false;
var toothSize = 28;

/**
 * This function initializes our script.
 */
function init() {
    
    var p = new Point(width / 6, (height / 3) + 30);
    var redGear = new Gear();
    redGear.create(p, 15, '#ee2a33', speed, true);          // red gear
    gears.push(redGear);
    
    g = addGear(p, redGear, 6, '#00aeef', speed, 35);            // blue gear
    
//    return;
    //g.gear.rot(21);
    
    g = addGear(g.point, g.gear, 11, '#52b755', g.speed, 110);   // green gear
    //g.gear.rot(10);
    
    
    g = addGear(g.point, g.gear, 6, '#d03c3a', g.speed, 25);    // dark red gear
    //g.gear.rot(34);
    
    g = addGear(g.point, g.gear, 25, '#F00FF0', g.speed, 330);   // light purple gear
    
    g.gear.rot(15);
    
    g = addGear(g.point, g.gear, 8, '#fec01e', g.speed, 305);   // yellow gear
    
    
    g = addGear(g.point, g.gear, 6, '#e0cb61', g.speed, 225);    // beige gear
    g.gear.rot(8);
    
    g = addGear(g.point, g.gear, 10, '#f69c9f', g.speed, 185);   // pink gear
    return;
    g.gear.rot(17);
}

function Gear() {
    this.angle = 0.0;
    this.group = new Group();
    
    this.create = function(/*Point*/ p, /*int*/ teeth, /*color*/ c, /*int*/ speed, /*boolean*/ clockwise) {
        //this.group = new Group();
        this.speed = speed;
        this.clockwise = clockwise;
        
        var d = teeth * 15;
        
        var outerCircle = new Path.Circle(p, d / 2);
        outerCircle.fillColor = c;
        
        var innerCircle = new Path.Circle(p, d / 8);
        innerCircle.fillColor = 'white';
        
        this.group.addChild(this.drawTeeth((d / 2) - 5, d / 15, c, p));
    }
    
    this.drawTeeth = function(/*int*/ d, /*int*/ plots, /*color*/ c, /*Point*/ p) {
        var increase = Math.PI * 2 / plots;
        var angle = 0;
        
        var teeth = new Group();
        this.pos = p;
        
        var symbol = new Symbol(this.createTooth(c));
        
        for (var i = 0; i < plots; i++) {
            var t = 2 * Math.PI * i / plots;
            var x = Math.round((d + (toothSize / 2)) * Math.cos(t));
            var y = Math.round((d + (toothSize / 2)) * Math.sin(t));
            
            var placed = symbol.place(new Point(p.x + x, p.y + y));
            
            //var text = new PointText(new Point(p.x + x, p.y + y));
            //text.content = '' + i;
            
            // 1 radian = 57.2957795 degrees
            placed.rotate(((180 / Math.PI) * angle) + 90);
            teeth.addChild(placed);
            angle += increase;
        }
        
        this.teethCount = plots;
        
        return teeth;
    }
    
    this.createTooth = function(/*color*/ c) {
        var path = new Path();
        path.add(new Point(-(toothSize / 4) + 2, -(toothSize / 2)));  // upper left
        path.add(new Point((toothSize / 4) - 2, -(toothSize / 2)));   // upper right
        
        // Curve down to the bottom right point
        var throughPoint = new Point(new Point((toothSize / 4), -(toothSize / 2) + 4));
        var toPoint = new Point((toothSize / 2), (toothSize / 2));
        path.arcTo(throughPoint, toPoint);
        
        path.add(new Point(-(toothSize / 2), (toothSize / 2)));   // bottom left
        
        // Curve up to the top left point
        throughPoint = new Point(new Point(new Point(-(toothSize / 4) , -(toothSize / 2) + 4)));
        toPoint = new Point(-(toothSize / 4) + 2, -(toothSize / 2));
        path.arcTo(throughPoint, toPoint);
        path.closePath();
        path.fillColor = c;
        
        return path;
    }
    
    this.getPoint = function() {
        return this.pos;
    }
    
    this.getTeethCount = function() {
        return this.teethCount;
    }
    
    this.rot = function(/*int*/ angle) {
        this.group.rotate(angle);
        this.angle += angle;
    }
    
    this.getRot = function() {
        return this.angle;
    }
    
    this.rotate = function() {
        if (this.clockwise) {
            this.group.rotate(this.speed);
        } else {
            this.group.rotate(-this.speed);
        }
    }
}

/**
 * This function helps us with debugging.  We can stop and start
 * the animation whenever the user clicks the mouse.
 */
function onMouseUp(event) {
    started = !started;
}

function addGear(/*Point*/ p, /*Gear*/ g1, /*int*/ g2, /*color*/ color, /*int*/ speed, /*int*/ angle) {
    console.log('addGear...');
    console.log('g1.getTeethCount(): ' + g1.getTeethCount());
    console.log('speed: ' + speed);
    var r1 = (g1.getTeethCount() * 15) / 2;
    var r2 = (g2 * 15) / 2;
    
    var p2 = new Point(p.x + ((r1 + r2 + (toothSize - 2)) * Math.cos((angle / 180) * Math.PI)),
                       p.y + ((r1 + r2 + (toothSize - 2)) * Math.sin((angle / 180) * Math.PI)));
    
    var gear = new Gear();
    gear.create(p2, g2, color, speed * (g1.getTeethCount() / g2), clockwise);
    gears.push(gear);
    
    /*
     * Now we need to rotate the gears so they match up
     */
    var w1 = 360 / g1.getTeethCount();
    console.log('g1.getRot(): ' + g1.getRot());
    /*angle -= g1.getRot();
    if (angle < 0) {
        angle += 360;
    }*/
    
    
    console.log('angle: ' + angle);
    
    console.log('w1: ' + w1);
    
    var tooth = Math.floor((angle - g1.getRot()) / w1);
    var t = 2 * Math.PI * tooth / g1.getTeethCount();
    console.log('t: ' + t);
    var x = Math.round((r1 + (toothSize / 2)) * Math.cos(t));
    var y = Math.round((r1 + (toothSize / 2)) * Math.sin(t));
    console.log('x,y: ' + x + ', ' + y);
    
    var r = g1.getRot() * (Math.PI / 180);
    var x1 = (Math.cos(r) * x) - (Math.sin(r) * y);
    var y1 = (Math.cos(r) * y) + (Math.sin(r) * x);
    console.log('x1,y1: ' + x1 + ', ' + y1);
    
    x = x1;
    y = y1;
    
    var pa1 = new Point(g1.getPoint().x + x, g1.getPoint().y + y);
    debugPoint(pa1, 'purple');
    
    console.debug('tooth: ' + tooth);
    t = 2 * Math.PI * 0.5 / gear.getTeethCount();
    x = Math.round((r2) * Math.cos(t));
    y = Math.round((r2) * Math.sin(t));
    var pad = new Point(gear.getPoint().x + x, gear.getPoint().y + y);
    debugPoint(pad, 'orange');
    
    
    
    var pa2 = gear.getPoint();
    debugPoint(pa2, 'green');
    
    debugPath(pa1, pa2, 'green');
    var v = pa1 - pa2;
    console.log('v.angle: ' + v.angle);
    
    debugPath(pad, pa2, 'green');
    var v2 = pad - pa2;
    console.log('v2.angle: ' + v2.angle);
    
    /*var angle1 = Math.atan2(pa1.y - pa2.y,
                            pa1.x - pa2.x);
    var angle2 = Math.atan2(pad.y - pa2.y,
                            pad.x - pad.x);
    console.log('gear.rot(' + ((180 / Math.PI) * (angle1-angle2)) + ')');*/

    //gear.rot((180 / Math.PI) * (angle1-angle2));
    gear.rot(v.angle - v2.angle);
    //gear.rot(-42);
    

    
    /*
    var a1 = Math.atan(Math.abs((pa1.x - pa2.x) / (pa1.y - pa2.y)));
    
    console.log('a1: ' + a1);
    
    var toothAngle = 2 * Math.asin(toothSize / (g1.getTeethCount() * 15));
    console.log('toothAngle: ' + toothAngle);
    var gapAngle = w1 - toothAngle;
    
    var a2 = (gapAngle / 2) + (toothAngle / 2);
    console.log('gear.rot(a1 - a2): gear.rot(' + (a1 - a2) + ')');
    //gear.rot(a1 - a2);
    */
    
    
    clockwise = !clockwise;
    return {
        'point': p2,
        'speed': speed * (g1.getTeethCount() / g2),
        'gear': gear
    };
}

function debugPath(p1, p2, c) {
    return;
    var path = new Path();
    path.add(p1);
    path.add(p2);
    path.strokeColor = c;
    path.strokeWidth = 2;
    
    return path;
}

function debugPoint(p, c) {
    return;
    var circ = new Path.Circle(p, 5);
    circ.fillColor = c;
    return circ;
}

/**
 * This function is called with each frame of the animation.
 */
function onFrame(event) {
    if (started) {
        for (var i = 0; i < gears.length; i++) {
            gears[i].rotate();
        }
    } 
}

init();
